#!/usr/bin/env python
"""
------------------------------------------------------------------------------
 NASA/GSFC, Software Integration & Visualization Office, Code 610.3
------------------------------------------------------------------------------

 SCRIPT:  adjust_liswrf_domain.py

 AUTHOR:
 Eric Kemp, NASA SIVO/Northrop Grumman

 DESCRIPTION:
 Creates new lis.config file from existing file, changing the domain
 information to match an existing WRF domain.  Uses the lisWrfDomain
 Fortran program to extract the domain information from namelist.wps and
 netCDF output files from geogrid.exe.

 USAGE: ./adjust_liswrf_domain.py -h

"""
# REVISION HISTORY:
# 20 May 2011 - First version, processed metgrid.exe output files.
# 01 Jun 2011 - Added logic to get absolute paths to files and programs.
# 17 Jul 2012 - New version for processing geogrid.exe files.
# ?? ??  2014 - Modified by J Jacob to support LIS 7 and LDT.
# 20 Oct 2014 - Added support for multiple nests.
# May 2020 - PEP8 conformance and significant refactoring (C. Cruz)

import glob
import os
import time
import sys
from platform import python_version
import argparse
import shared.utils as utils


def parse_args():
    """Parse command line arguments.
    @returns: populated namespace containing parsed arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("domain_prog",
                        help="The path to the lisWrfDomain executable.")
    parser.add_argument("lis_config",
                        help="The path to the input lis.config file.")
    parser.add_argument("ldt_config",
                        help="The path to the input ldt.config file.")
    parser.add_argument("wps_dir",
                        help="The directory with a namelist.wps file and \
                        netCDF output from GEOGRID.")
    return parser.parse_args()


def main():

    if sys.version_info[0] == 2 and sys.version_info[1] < 7:
        print("Python version " + python_version() + " is not supported.")
        sys.exit()

    # Process options
    args = parse_args()
    domain_prog = args.domain_prog
    lis_config = args.lis_config
    ldt_config = args.ldt_config
    wps_dir = args.wps_dir

    print("Start LISWRF domain adjustment...")
    start_time = time.time()

    os.chdir(wps_dir)

    if not os.path.isfile("namelist.wps"):
        msg = "ERROR, file namelist.wps does not exist in %s!" % (wps_dir)
        msg += "\nCannot continue!"
        raise SystemExit(msg)

    geogridfiles = glob.glob("geo_em*")
    if len(geogridfiles) == 0:
        msg = "ERROR, no GEOGRID netCDF output files exist in %s!" % (wps_dir)
        msg += "\nCannot continue!"
        raise SystemExit(msg)

    isfile = False
    for geogridfile in geogridfiles:
        if os.path.isfile(geogridfile):
            isfile = True
            break

    if not isfile:
        msg = "ERROR, no GEOGRID netcdf output files exist in %s!" % (wps_dir)
        msg += "\nCannot continue!"
        raise SystemExit(msg)

    # Run application
    utils.run_shell_command(domain_prog)
    if not os.path.isfile("domain_data"):
        raise SystemExit("ERROR, domain_data file not generated by %s" % (domain_prog))

    # Read in the entries from domain_data

    domain_data = {}
    domain_data_used = {}
    lines = open("domain_data").readlines()
    for line in lines:
        (key, value) = line.split(":")
        tokens = key.split()
        newkey = ""
        for i in range(0, len(tokens)):
            newkey += "%s " % (tokens[i])
        newkey = newkey[:-1] + ":"
        domain_data[newkey] = value
        domain_data_used[newkey] = False

    # Now create a new lis.config file with the updated config information.

    output = open("%s.new" % (lis_config), "w")
    lines = open(lis_config).readlines()
    for line in lines:
        if ":" not in line:
            output.write(line)
        else:
            tokens = line.split(":")
            key_tokens = tokens[0].split()
            newkey = ""
            for i in range(0, len(key_tokens)):
                newkey += "%s " % (key_tokens[i])
            newkey = newkey[:-1] + ":"
            if newkey in list(domain_data.keys()):
                newline = "%s %s" % (newkey, domain_data[newkey])
                output.write(newline)
                domain_data_used[newkey] = True
            else:
                output.write(line)
    output.close()

    # Now create a new ldt.config file with the updated config information.

    output = open("%s.new" % (ldt_config), "w")
    lines = open(ldt_config).readlines()
    for line in lines:
        if ":" not in line:
            output.write(line)
        else:
            tokens = line.split(":")
            key_tokens = tokens[0].split()
            newkey = ""
            for i in range(0, len(key_tokens)):
                newkey += "%s " % (key_tokens[i])
            newkey = newkey[:-1] + ":"
            if newkey in list(domain_data.keys()):
                newline = "%s %s" % (newkey, domain_data[newkey])
                output.write(newline)
                domain_data_used[newkey] = True
            else:
                output.write(line)
    output.close()

    # Check if any domain_data keys were skipped.

    keys = list(domain_data_used.keys())
    keys.sort()

    for key in keys:
        if not domain_data_used[key]:
            print("ERROR, '%s' was not written to config files!" % (key))
            print("Edit input config templates to add missing entries and try again!")
            sys.exit()

    print('CAUTION: Further edits to lis.config.new and ldt.config.new may be ')
    print('needed to address input data selections, physics, etc.')

    end_time = time.time() - start_time
    print("Time taken = %f" % end_time)
    print(sys.argv[0] + " is DONE.")


if __name__ == "__main__":
    main()
