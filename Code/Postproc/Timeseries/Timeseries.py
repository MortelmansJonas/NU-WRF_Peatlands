# ---------------------------------------------------------------------------------------------
# MODULES
# ---------------------------------------------------------------------------------------------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from netCDF4 import Dataset

# ---------------------------------------------------------------------------------------------
# LOAD DATA
# ---------------------------------------------------------------------------------------------
ds_d02 = Dataset('/scratch/leuven/336/vsc33651/nu-wrf-dev/domain2_weekly.nc','r')
ds_d01 = Dataset('/scratch/leuven/336/vsc33651/nu-wrf-dev/domain1_weekly.nc','r')

timeseries = pd.date_range('2015-05-15', '2020-09-15', freq='D')
year = timeseries.year
month = timeseries.month

i2015 = np.where((year == 2015) & (month > 5) & (month < 9))
i2016 = np.where((year == 2016) & (month > 5) & (month < 9))
i2017 = np.where((year == 2017) & (month > 5) & (month < 9))
i2018 = np.where((year == 2018) & (month > 5) & (month < 9))
i2019 = np.where((year == 2019) & (month > 5) & (month < 9))
i2020 = np.where((year == 2020) & (month > 5) & (month < 9))

# ---------------------------------------------------------------------------------------------
# PLOTS
# ---------------------------------------------------------------------------------------------
x1 = 0.002
# DOMAIN 1 (from: https://www.semicolonworld.com/question/43500/python-matplotlib-is-there-a-way-to-make-a-discontinuous-axis)
# First: create a subplot for each year
fig, axes = plt.subplots(5, 6, sharey = 'row', figsize=(8.27,11.69), dpi=100)

# Obs
axes[0][0].plot(pd.to_datetime(timeseries), ds_d01['data_Obs'][:],'.',ms=3)
axes[0][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d01['Obs'][0:13],'r-', ms=3)
axes[0][1].plot(pd.to_datetime(timeseries), ds_d01['data_Obs'][:],'.',ms=3)
axes[0][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d01['Obs'][13:26],'r-', ms=3)
axes[0][2].plot(pd.to_datetime(timeseries), ds_d01['data_Obs'][:],'.',ms=3)
axes[0][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d01['Obs'][26:39],'r-', ms=3)
axes[0][3].plot(pd.to_datetime(timeseries), ds_d01['data_Obs'][:],'.',ms=3)
axes[0][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d01['Obs'][39:52],'r-', ms=3)
axes[0][4].plot(pd.to_datetime(timeseries), ds_d01['data_Obs'][:],'.',ms=3)
axes[0][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d01['Obs'][52:65],'r-', ms=3)
axes[0][5].plot(pd.to_datetime(timeseries), ds_d01['data_Obs'][:],'.',ms=3)
axes[0][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d01['Obs'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[0][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[0][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[0][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[0][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[0][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[0][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[0][0].spines['right'].set_visible(False)
axes[0][1].spines['right'].set_visible(False)
axes[0][2].spines['right'].set_visible(False)
axes[0][3].spines['right'].set_visible(False)
axes[0][4].spines['right'].set_visible(False)
axes[0][1].spines['left'].set_visible(False)
axes[0][2].spines['left'].set_visible(False)
axes[0][3].spines['left'].set_visible(False)
axes[0][4].spines['left'].set_visible(False)
axes[0][5].spines['left'].set_visible(False)
axes[0][0].yaxis.tick_left()
axes[0][1].tick_params(axis='y', colors='w')
axes[0][2].tick_params(axis='y', colors='w')
axes[0][3].tick_params(axis='y', colors='w')
axes[0][4].tick_params(axis='y', colors='w')
axes[0][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.0025)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[0][0].transAxes, color='k', clip_on = False)
axes[0][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][1].transAxes)
axes[0][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][1].plot((-d,d),(-d,+d), **kwargs)
axes[0][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][2].transAxes)
axes[0][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][2].plot((-d,d),(-d,+d), **kwargs)
axes[0][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][3].transAxes)
axes[0][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][3].plot((-d,d),(-d,+d), **kwargs)
axes[0][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][4].transAxes)
axes[0][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][4].plot((-d,d),(-d,+d), **kwargs)
axes[0][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][5].transAxes)
axes[0][5].plot((-d,d),(-d,+d), **kwargs)
axes[0][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[0][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
fig.suptitle('Convection-parameterized (9 km)', fontsize=20, y = 0.93)
axes[0][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[0][0].grid(which='major', axis='both', color='lightgray')
axes[0][1].grid(which='major', axis='both', color='lightgray')
axes[0][2].grid(which='major', axis='both', color='lightgray')
axes[0][3].grid(which='major', axis='both', color='lightgray')
axes[0][4].grid(which='major', axis='both', color='lightgray')
axes[0][5].grid(which='major', axis='both', color='lightgray')

axes[0][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[0][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[0][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[0][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[0][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[0][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[0][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][0].annotate('(a) \n ', xy=(x1,  axes[0][0].get_ylim()[1]),annotation_clip=False)
# CAPExP
axes[4][0].plot(pd.to_datetime(timeseries), ds_d01['data_CAPExP'][:],'.',ms=3)
axes[4][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d01['CAPExP'][0:13],'r-', ms=3)
axes[4][1].plot(pd.to_datetime(timeseries), ds_d01['data_CAPExP'][:],'.',ms=3)
axes[4][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d01['CAPExP'][13:26],'r-', ms=3)
axes[4][2].plot(pd.to_datetime(timeseries), ds_d01['data_CAPExP'][:],'.',ms=3)
axes[4][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d01['CAPExP'][26:39],'r-', ms=3)
axes[4][3].plot(pd.to_datetime(timeseries), ds_d01['data_CAPExP'][:],'.',ms=3)
axes[4][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d01['CAPExP'][39:52],'r-', ms=3)
axes[4][4].plot(pd.to_datetime(timeseries), ds_d01['data_CAPExP'][:],'.',ms=3)
axes[4][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d01['CAPExP'][52:65],'r-', ms=3)
axes[4][5].plot(pd.to_datetime(timeseries), ds_d01['data_CAPExP'][:],'.',ms=3)
axes[4][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d01['CAPExP'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[4][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[4][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[4][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[4][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[4][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[4][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[4][0].spines['right'].set_visible(False)
axes[4][1].spines['right'].set_visible(False)
axes[4][2].spines['right'].set_visible(False)
axes[4][3].spines['right'].set_visible(False)
axes[4][4].spines['right'].set_visible(False)
axes[4][1].spines['left'].set_visible(False)
axes[4][2].spines['left'].set_visible(False)
axes[4][3].spines['left'].set_visible(False)
axes[4][4].spines['left'].set_visible(False)
axes[4][5].spines['left'].set_visible(False)
axes[4][0].yaxis.tick_left()
# ylim = np.arange(0, np.amax(daily_CAPExP_d01), 0.25)
axes[4][1].tick_params(axis='y', colors='w')
axes[4][2].tick_params(axis='y', colors='w')
axes[4][3].tick_params(axis='y', colors='w')
axes[4][4].tick_params(axis='y', colors='w')
axes[4][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[4][0].transAxes, color='k', clip_on = False)
axes[4][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[4][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[4][1].transAxes)
axes[4][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[4][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[4][1].plot((-d,d),(-d,+d), **kwargs)
axes[4][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[4][2].transAxes)
axes[4][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[4][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[4][2].plot((-d,d),(-d,+d), **kwargs)
axes[4][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[4][3].transAxes)
axes[4][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[4][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[4][3].plot((-d,d),(-d,+d), **kwargs)
axes[4][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[4][4].transAxes)
axes[4][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[4][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[4][4].plot((-d,d),(-d,+d), **kwargs)
axes[4][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[4][5].transAxes)
axes[4][5].plot((-d,d),(-d,+d), **kwargs)
axes[4][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[4][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
axes[4][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[4][0].grid(which='major', axis='both', color='lightgray')
axes[4][1].grid(which='major', axis='both', color='lightgray')
axes[4][2].grid(which='major', axis='both', color='lightgray')
axes[4][3].grid(which='major', axis='both', color='lightgray')
axes[4][4].grid(which='major', axis='both', color='lightgray')
axes[4][5].grid(which='major', axis='both', color='lightgray')

axes[4][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[4][0].set_xticklabels(['06', '07 \n   20', '08 \n15', '09'])
axes[4][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[4][1].set_xticklabels(['06', '07 \n   20', '08 \n16', '09'])
axes[4][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[4][2].set_xticklabels(['06', '07 \n   20', '08 \n17', '09'])
axes[4][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[4][3].set_xticklabels(['06', '07 \n   20', '08 \n18', '09'])
axes[4][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[4][4].set_xticklabels(['06', '07 \n   20', '08 \n19', '09'])
axes[4][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[4][5].set_xticklabels(['06', '07 \n   20', '08 \n20', '09'])
axes[4][0].annotate('(e) \n ', xy=(x1,  axes[4][0].get_ylim()[1]),annotation_clip=False)

# LPI
axes[1][0].plot(pd.to_datetime(timeseries), ds_d01['data_LPI'][:],'.',ms=3)
axes[1][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d01['LPI'][0:13],'r-', ms=3)
axes[1][1].plot(pd.to_datetime(timeseries), ds_d01['data_LPI'][:],'.',ms=3)
axes[1][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d01['LPI'][13:26],'r-', ms=3)
axes[1][2].plot(pd.to_datetime(timeseries), ds_d01['data_LPI'][:],'.',ms=3)
axes[1][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d01['LPI'][26:39],'r-', ms=3)
axes[1][3].plot(pd.to_datetime(timeseries), ds_d01['data_LPI'][:],'.',ms=3)
axes[1][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d01['LPI'][39:52],'r-', ms=3)
axes[1][4].plot(pd.to_datetime(timeseries), ds_d01['data_LPI'][:],'.',ms=3)
axes[1][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d01['LPI'][52:65],'r-', ms=3)
axes[1][5].plot(pd.to_datetime(timeseries), ds_d01['data_LPI'][:],'.',ms=3)
axes[1][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d01['LPI'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[1][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[1][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[1][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[1][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[1][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[1][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[1][0].spines['right'].set_visible(False)
axes[1][1].spines['right'].set_visible(False)
axes[1][2].spines['right'].set_visible(False)
axes[1][3].spines['right'].set_visible(False)
axes[1][4].spines['right'].set_visible(False)
axes[1][1].spines['left'].set_visible(False)
axes[1][2].spines['left'].set_visible(False)
axes[1][3].spines['left'].set_visible(False)
axes[1][4].spines['left'].set_visible(False)
axes[1][5].spines['left'].set_visible(False)
axes[1][0].yaxis.tick_left()
axes[1][1].tick_params(axis='y', colors='w')
axes[1][2].tick_params(axis='y', colors='w')
axes[1][3].tick_params(axis='y', colors='w')
axes[1][4].tick_params(axis='y', colors='w')
axes[1][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[1][0].transAxes, color='k', clip_on = False)
axes[1][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][1].transAxes)
axes[1][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][1].plot((-d,d),(-d,+d), **kwargs)
axes[1][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][2].transAxes)
axes[1][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][2].plot((-d,d),(-d,+d), **kwargs)
axes[1][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][3].transAxes)
axes[1][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][3].plot((-d,d),(-d,+d), **kwargs)
axes[1][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][4].transAxes)
axes[1][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][4].plot((-d,d),(-d,+d), **kwargs)
axes[1][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][5].transAxes)
axes[1][5].plot((-d,d),(-d,+d), **kwargs)
axes[1][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[1][0].set_ylabel('LPI \n(J kg$^{-1}$)')
axes[1][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[1][0].grid(which='major', axis='both', color='lightgray')
axes[1][1].grid(which='major', axis='both', color='lightgray')
axes[1][2].grid(which='major', axis='both', color='lightgray')
axes[1][3].grid(which='major', axis='both', color='lightgray')
axes[1][4].grid(which='major', axis='both', color='lightgray')
axes[1][5].grid(which='major', axis='both', color='lightgray')

axes[1][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                    pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[1][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[1][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[1][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[1][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[1][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[1][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][0].annotate('(b) \n ', xy=(x1,  axes[1][0].get_ylim()[1]),annotation_clip=False)

# LTG3
axes[2][0].plot(pd.to_datetime(timeseries), ds_d01['data_LTG3'][:],'.',ms=3)
axes[2][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d01['LTG3'][0:13],'r-', ms=3)
axes[2][1].plot(pd.to_datetime(timeseries), ds_d01['data_LTG3'][:],'.',ms=3)
axes[2][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d01['LTG3'][13:26],'r-', ms=3)
axes[2][2].plot(pd.to_datetime(timeseries), ds_d01['data_LTG3'][:],'.',ms=3)
axes[2][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d01['LTG3'][26:39],'r-', ms=3)
axes[2][3].plot(pd.to_datetime(timeseries), ds_d01['data_LTG3'][:],'.',ms=3)
axes[2][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d01['LTG3'][39:52],'r-', ms=3)
axes[2][4].plot(pd.to_datetime(timeseries), ds_d01['data_LTG3'][:],'.',ms=3)
axes[2][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d01['LTG3'][52:65],'r-', ms=3)
axes[2][5].plot(pd.to_datetime(timeseries), ds_d01['data_LTG3'][:],'.',ms=3)
axes[2][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d01['LTG3'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[2][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[2][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[2][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[2][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[2][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[2][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[2][0].spines['right'].set_visible(False)
axes[2][1].spines['right'].set_visible(False)
axes[2][2].spines['right'].set_visible(False)
axes[2][3].spines['right'].set_visible(False)
axes[2][4].spines['right'].set_visible(False)
axes[2][1].spines['left'].set_visible(False)
axes[2][2].spines['left'].set_visible(False)
axes[2][3].spines['left'].set_visible(False)
axes[2][4].spines['left'].set_visible(False)
axes[2][5].spines['left'].set_visible(False)
axes[2][0].yaxis.tick_left()
axes[2][1].tick_params(axis='y', colors='w')
axes[2][2].tick_params(axis='y', colors='w')
axes[2][3].tick_params(axis='y', colors='w')
axes[2][4].tick_params(axis='y', colors='w')
axes[2][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[2][0].transAxes, color='k', clip_on = False)
axes[2][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][1].transAxes)
axes[2][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][1].plot((-d,d),(-d,+d), **kwargs)
axes[2][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][2].transAxes)
axes[2][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][2].plot((-d,d),(-d,+d), **kwargs)
axes[2][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][3].transAxes)
axes[2][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][3].plot((-d,d),(-d,+d), **kwargs)
axes[2][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][4].transAxes)
axes[2][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][4].plot((-d,d),(-d,+d), **kwargs)
axes[2][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][5].transAxes)
axes[2][5].plot((-d,d),(-d,+d), **kwargs)
axes[2][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[2][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
axes[2][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[2][0].grid(which='major', axis='both', color='lightgray')
axes[2][1].grid(which='major', axis='both', color='lightgray')
axes[2][2].grid(which='major', axis='both', color='lightgray')
axes[2][3].grid(which='major', axis='both', color='lightgray')
axes[2][4].grid(which='major', axis='both', color='lightgray')
axes[2][5].grid(which='major', axis='both', color='lightgray')

axes[2][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[2][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[2][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[2][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[2][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[2][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[2][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][0].annotate('(c) \n ', xy=(x1,  axes[2][0].get_ylim()[1]),annotation_clip=False)

# PR92W
axes[3][0].plot(pd.to_datetime(timeseries), ds_d01['data_PR92W'][:],'.',ms=3)
axes[3][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d01['PR92W'][0:13],'r-', ms=3)
axes[3][1].plot(pd.to_datetime(timeseries), ds_d01['data_PR92W'][:],'.',ms=3)
axes[3][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d01['PR92W'][13:26],'r-', ms=3)
axes[3][2].plot(pd.to_datetime(timeseries), ds_d01['data_PR92W'][:],'.',ms=3)
axes[3][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d01['PR92W'][26:39],'r-', ms=3)
axes[3][3].plot(pd.to_datetime(timeseries), ds_d01['data_PR92W'][:],'.',ms=3)
axes[3][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d01['PR92W'][39:52],'r-', ms=3)
axes[3][4].plot(pd.to_datetime(timeseries), ds_d01['data_PR92W'][:],'.',ms=3)
axes[3][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d01['PR92W'][52:65],'r-', ms=3)
axes[3][5].plot(pd.to_datetime(timeseries), ds_d01['data_PR92W'][:],'.',ms=3)
axes[3][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d01['PR92W'][65:78],'r-', ms=3)
# the set the limits of the x-axis to cover only one year
axes[3][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[3][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[3][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[3][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[3][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[3][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[3][0].spines['right'].set_visible(False)
axes[3][1].spines['right'].set_visible(False)
axes[3][2].spines['right'].set_visible(False)
axes[3][3].spines['right'].set_visible(False)
axes[3][4].spines['right'].set_visible(False)
axes[3][1].spines['left'].set_visible(False)
axes[3][2].spines['left'].set_visible(False)
axes[3][3].spines['left'].set_visible(False)
axes[3][4].spines['left'].set_visible(False)
axes[3][5].spines['left'].set_visible(False)
axes[3][0].yaxis.tick_left()
axes[3][1].tick_params(axis='y', colors='w')
axes[3][2].tick_params(axis='y', colors='w')
axes[3][3].tick_params(axis='y', colors='w')
axes[3][4].tick_params(axis='y', colors='w')
axes[3][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[3][0].transAxes, color='k', clip_on = False)
axes[3][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][1].transAxes)
axes[3][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][1].plot((-d,d),(-d,+d), **kwargs)
axes[3][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][2].transAxes)
axes[3][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][2].plot((-d,d),(-d,+d), **kwargs)
axes[3][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][3].transAxes)
axes[3][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][3].plot((-d,d),(-d,+d), **kwargs)
axes[3][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][4].transAxes)
axes[3][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][4].plot((-d,d),(-d,+d), **kwargs)
axes[3][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][5].transAxes)
axes[3][5].plot((-d,d),(-d,+d), **kwargs)
axes[3][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[3][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
axes[3][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[3][0].grid(which='major', axis='both', color='lightgray')
axes[3][1].grid(which='major', axis='both', color='lightgray')
axes[3][2].grid(which='major', axis='both', color='lightgray')
axes[3][3].grid(which='major', axis='both', color='lightgray')
axes[3][4].grid(which='major', axis='both', color='lightgray')
axes[3][5].grid(which='major', axis='both', color='lightgray')

axes[3][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[3][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[3][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[3][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[3][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[3][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[3][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][0].annotate('(d) \n ', xy=(x1,  axes[3][0].get_ylim()[1]),annotation_clip=False)
plt.savefig('/scratch/leuven/336/vsc33651/nu-wrf-dev/Plots/timeseries_all_d01.eps')
plt.close()

# DOMAIN 2
fig, axes = plt.subplots(4, 6, sharey = 'row', figsize=(8.27,11.69), dpi=100)
# Obs
axes[0][0].plot(pd.to_datetime(timeseries), ds_d02['data_Obs'][:],'.',ms=3)
axes[0][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d02['Obs'][0:13],'r-', ms=3)
axes[0][1].plot(pd.to_datetime(timeseries), ds_d02['data_Obs'][:],'.',ms=3)
axes[0][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d02['Obs'][13:26],'r-', ms=3)
axes[0][2].plot(pd.to_datetime(timeseries), ds_d02['data_Obs'][:],'.',ms=3)
axes[0][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d02['Obs'][26:39],'r-', ms=3)
axes[0][3].plot(pd.to_datetime(timeseries), ds_d02['data_Obs'][:],'.',ms=3)
axes[0][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d02['Obs'][39:52],'r-', ms=3)
axes[0][4].plot(pd.to_datetime(timeseries), ds_d02['data_Obs'][:],'.',ms=3)
axes[0][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d02['Obs'][52:65],'r-', ms=3)
axes[0][5].plot(pd.to_datetime(timeseries), ds_d02['data_Obs'][:],'.',ms=3)
axes[0][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d02['Obs'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[0][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[0][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[0][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[0][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[0][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[0][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[0][0].spines['right'].set_visible(False)
axes[0][1].spines['right'].set_visible(False)
axes[0][2].spines['right'].set_visible(False)
axes[0][3].spines['right'].set_visible(False)
axes[0][4].spines['right'].set_visible(False)
axes[0][1].spines['left'].set_visible(False)
axes[0][2].spines['left'].set_visible(False)
axes[0][3].spines['left'].set_visible(False)
axes[0][4].spines['left'].set_visible(False)
axes[0][5].spines['left'].set_visible(False)
axes[0][0].yaxis.tick_left()
# ylim = np.arange(0, np.amax(daily_PR92W_d02), 0.25)
axes[0][1].tick_params(axis='y', colors='w')
axes[0][2].tick_params(axis='y', colors='w')
axes[0][3].tick_params(axis='y', colors='w')
axes[0][4].tick_params(axis='y', colors='w')
axes[0][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[0][0].transAxes, color='k', clip_on = False)
axes[0][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][1].transAxes)
axes[0][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][1].plot((-d,d),(-d,+d), **kwargs)
axes[0][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][2].transAxes)
axes[0][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][2].plot((-d,d),(-d,+d), **kwargs)
axes[0][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][3].transAxes)
axes[0][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][3].plot((-d,d),(-d,+d), **kwargs)
axes[0][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][4].transAxes)
axes[0][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[0][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[0][4].plot((-d,d),(-d,+d), **kwargs)
axes[0][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[0][5].transAxes)
axes[0][5].plot((-d,d),(-d,+d), **kwargs)
axes[0][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[0][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
fig.suptitle('Convection-permitting (3 km)', fontsize=20, y = 0.93)
axes[0][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[0][0].grid(which='major', axis='both', color='lightgray')
axes[0][1].grid(which='major', axis='both', color='lightgray')
axes[0][2].grid(which='major', axis='both', color='lightgray')
axes[0][3].grid(which='major', axis='both', color='lightgray')
axes[0][4].grid(which='major', axis='both', color='lightgray')
axes[0][5].grid(which='major', axis='both', color='lightgray')

axes[0][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[0][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[0][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[0][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[0][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[0][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[0][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[0][0].annotate('(a) \n ', xy=(x1,  axes[0][0].get_ylim()[1]),annotation_clip=False)

# LPI
axes[1][0].plot(pd.to_datetime(timeseries), ds_d02['data_LPI'][:],'.',ms=3)
axes[1][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d02['LPI'][0:13],'r-', ms=3)
axes[1][1].plot(pd.to_datetime(timeseries), ds_d02['data_LPI'][:],'.',ms=3)
axes[1][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d02['LPI'][13:26],'r-', ms=3)
axes[1][2].plot(pd.to_datetime(timeseries), ds_d02['data_LPI'][:],'.',ms=3)
axes[1][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d02['LPI'][26:39],'r-', ms=3)
axes[1][3].plot(pd.to_datetime(timeseries), ds_d02['data_LPI'][:],'.',ms=3)
axes[1][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d02['LPI'][39:52],'r-', ms=3)
axes[1][4].plot(pd.to_datetime(timeseries), ds_d02['data_LPI'][:],'.',ms=3)
axes[1][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d02['LPI'][52:65],'r-', ms=3)
axes[1][5].plot(pd.to_datetime(timeseries), ds_d02['data_LPI'][:],'.',ms=3)
axes[1][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d02['LPI'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[1][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[1][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[1][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[1][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[1][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[1][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[1][0].spines['right'].set_visible(False)
axes[1][1].spines['right'].set_visible(False)
axes[1][2].spines['right'].set_visible(False)
axes[1][3].spines['right'].set_visible(False)
axes[1][4].spines['right'].set_visible(False)
axes[1][1].spines['left'].set_visible(False)
axes[1][2].spines['left'].set_visible(False)
axes[1][3].spines['left'].set_visible(False)
axes[1][4].spines['left'].set_visible(False)
axes[1][5].spines['left'].set_visible(False)
axes[1][0].yaxis.tick_left()
# ylim = np.arange(0, np.amax(daily_LPI_d02), 0.25)
axes[1][1].tick_params(axis='y', colors='w')
axes[1][2].tick_params(axis='y', colors='w')
axes[1][3].tick_params(axis='y', colors='w')
axes[1][4].tick_params(axis='y', colors='w')
axes[1][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[1][0].transAxes, color='k', clip_on = False)
axes[1][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][1].transAxes)
axes[1][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][1].plot((-d,d),(-d,+d), **kwargs)
axes[1][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][2].transAxes)
axes[1][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][2].plot((-d,d),(-d,+d), **kwargs)
axes[1][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][3].transAxes)
axes[1][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][3].plot((-d,d),(-d,+d), **kwargs)
axes[1][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][4].transAxes)
axes[1][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[1][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[1][4].plot((-d,d),(-d,+d), **kwargs)
axes[1][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[1][5].transAxes)
axes[1][5].plot((-d,d),(-d,+d), **kwargs)
axes[1][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[1][0].set_ylabel('LPI\n(J kg$^{-1}$)')
axes[1][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[1][0].grid(which='major', axis='both', color='lightgray')
axes[1][1].grid(which='major', axis='both', color='lightgray')
axes[1][2].grid(which='major', axis='both', color='lightgray')
axes[1][3].grid(which='major', axis='both', color='lightgray')
axes[1][4].grid(which='major', axis='both', color='lightgray')
axes[1][5].grid(which='major', axis='both', color='lightgray')

axes[1][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[1][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[1][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[1][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[1][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[1][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                     pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[1][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[1][0].annotate('(b) \n ', xy=(x1,  axes[1][0].get_ylim()[1]),annotation_clip=False)

# LTG3
axes[2][0].plot(pd.to_datetime(timeseries), ds_d02['data_LTG3'][:],'.',ms=3)
axes[2][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d02['LTG3'][0:13],'r-', ms=3)
axes[2][1].plot(pd.to_datetime(timeseries), ds_d02['data_LTG3'][:],'.',ms=3)
axes[2][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d02['LTG3'][13:26],'r-', ms=3)
axes[2][2].plot(pd.to_datetime(timeseries), ds_d02['data_LTG3'][:],'.',ms=3)
axes[2][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d02['LTG3'][26:39],'r-', ms=3)
axes[2][3].plot(pd.to_datetime(timeseries), ds_d02['data_LTG3'][:],'.',ms=3)
axes[2][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d02['LTG3'][39:52],'r-', ms=3)
axes[2][4].plot(pd.to_datetime(timeseries), ds_d02['data_LTG3'][:],'.',ms=3)
axes[2][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d02['LTG3'][52:65],'r-', ms=3)
axes[2][5].plot(pd.to_datetime(timeseries), ds_d02['data_LTG3'][:],'.',ms=3)
axes[2][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d02['LTG3'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[2][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[2][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[2][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[2][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[2][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[2][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[2][0].spines['right'].set_visible(False)
axes[2][1].spines['right'].set_visible(False)
axes[2][2].spines['right'].set_visible(False)
axes[2][3].spines['right'].set_visible(False)
axes[2][4].spines['right'].set_visible(False)
axes[2][1].spines['left'].set_visible(False)
axes[2][2].spines['left'].set_visible(False)
axes[2][3].spines['left'].set_visible(False)
axes[2][4].spines['left'].set_visible(False)
axes[2][5].spines['left'].set_visible(False)
axes[2][0].yaxis.tick_left()
# ylim = np.arange(0, np.amax(daily_LTG3_d02), 0.25)
axes[2][1].tick_params(axis='y', colors='w')
axes[2][2].tick_params(axis='y', colors='w')
axes[2][3].tick_params(axis='y', colors='w')
axes[2][4].tick_params(axis='y', colors='w')
axes[2][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[2][0].transAxes, color='k', clip_on = False)
axes[2][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][1].transAxes)
axes[2][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][1].plot((-d,d),(-d,+d), **kwargs)
axes[2][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][2].transAxes)
axes[2][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][2].plot((-d,d),(-d,+d), **kwargs)
axes[2][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][3].transAxes)
axes[2][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][3].plot((-d,d),(-d,+d), **kwargs)
axes[2][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][4].transAxes)
axes[2][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[2][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[2][4].plot((-d,d),(-d,+d), **kwargs)
axes[2][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[2][5].transAxes)
axes[2][5].plot((-d,d),(-d,+d), **kwargs)
axes[2][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[2][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
axes[2][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[2][0].grid(which='major', axis='both', color='lightgray')
axes[2][1].grid(which='major', axis='both', color='lightgray')
axes[2][2].grid(which='major', axis='both', color='lightgray')
axes[2][3].grid(which='major', axis='both', color='lightgray')
axes[2][4].grid(which='major', axis='both', color='lightgray')
axes[2][5].grid(which='major', axis='both', color='lightgray')

axes[2][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[2][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[2][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[2][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[2][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[2][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[2][5].set_xticklabels(['', '', '', ''], rotation=30)
axes[2][0].annotate('(c) \n ', xy=(x1,  axes[2][0].get_ylim()[1]),annotation_clip=False)

# PR92W
axes[3][0].plot(pd.to_datetime(timeseries), ds_d02['data_PR92W'][:],'.',ms=3)
axes[3][0].plot(pd.date_range('2015-06-01','2015-08-31', freq='W'), ds_d02['PR92W'][0:13],'r-', ms=3)
axes[3][1].plot(pd.to_datetime(timeseries), ds_d02['data_PR92W'][:],'.',ms=3)
axes[3][1].plot(pd.date_range('2016-06-01','2016-08-31', freq='W'), ds_d02['PR92W'][13:26],'r-', ms=3)
axes[3][2].plot(pd.to_datetime(timeseries), ds_d02['data_PR92W'][:],'.',ms=3)
axes[3][2].plot(pd.date_range('2017-06-01','2017-08-31', freq='W'), ds_d02['PR92W'][26:39],'r-', ms=3)
axes[3][3].plot(pd.to_datetime(timeseries), ds_d02['data_PR92W'][:],'.',ms=3)
axes[3][3].plot(pd.date_range('2018-06-01','2018-08-31', freq='W'), ds_d02['PR92W'][39:52],'r-', ms=3)
axes[3][4].plot(pd.to_datetime(timeseries), ds_d02['data_PR92W'][:],'.',ms=3)
axes[3][4].plot(pd.date_range('2019-06-01','2019-08-31', freq='W'), ds_d02['PR92W'][52:65],'r-', ms=3)
axes[3][5].plot(pd.to_datetime(timeseries), ds_d02['data_PR92W'][:],'.',ms=3)
axes[3][5].plot(pd.date_range('2020-06-01','2020-08-31', freq='W'), ds_d02['PR92W'][65:78],'r-', ms=3)
# then set the limits of the x-axis to cover only one year
axes[3][0].set_xlim(pd.to_datetime('2015-05-15'), pd.to_datetime('2015-09-15'))
axes[3][1].set_xlim(pd.to_datetime('2016-05-15'), pd.to_datetime('2016-09-15'))
axes[3][2].set_xlim(pd.to_datetime('2017-05-15'), pd.to_datetime('2017-09-15'))
axes[3][3].set_xlim(pd.to_datetime('2018-05-15'), pd.to_datetime('2018-09-15'))
axes[3][4].set_xlim(pd.to_datetime('2019-05-15'), pd.to_datetime('2019-09-15'))
axes[3][5].set_xlim(pd.to_datetime('2020-05-15'), pd.to_datetime('2020-09-15'))
# Set the spines invisible
axes[3][0].spines['right'].set_visible(False)
axes[3][1].spines['right'].set_visible(False)
axes[3][2].spines['right'].set_visible(False)
axes[3][3].spines['right'].set_visible(False)
axes[3][4].spines['right'].set_visible(False)
axes[3][1].spines['left'].set_visible(False)
axes[3][2].spines['left'].set_visible(False)
axes[3][3].spines['left'].set_visible(False)
axes[3][4].spines['left'].set_visible(False)
axes[3][5].spines['left'].set_visible(False)
axes[3][0].yaxis.tick_left()
# ylim = np.arange(0, np.amax(daily_PR92W_d02), 0.25)
axes[3][1].tick_params(axis='y', colors='w')
axes[3][2].tick_params(axis='y', colors='w')
axes[3][3].tick_params(axis='y', colors='w')
axes[3][4].tick_params(axis='y', colors='w')
axes[3][5].tick_params(axis='y', colors='w')
# Make spacing between two axes a bit smaller
plt.subplots_adjust(wspace=0.075)
# add broken axis lines
d = 0.015
kwargs = dict(transform=axes[3][0].transAxes, color='k', clip_on = False)
axes[3][0].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][0].plot((1-d,1+d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][1].transAxes)
axes[3][1].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][1].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][1].plot((-d,d),(-d,+d), **kwargs)
axes[3][1].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][2].transAxes)
axes[3][2].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][2].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][2].plot((-d,d),(-d,+d), **kwargs)
axes[3][2].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[4][3].transAxes)
axes[3][3].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][3].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][3].plot((-d,d),(-d,+d), **kwargs)
axes[3][3].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][4].transAxes)
axes[3][4].plot((1-d,1+d),(-d,+d), **kwargs)
axes[3][4].plot((1-d,1+d),(1-d,1+d), **kwargs)
axes[3][4].plot((-d,d),(-d,+d), **kwargs)
axes[3][4].plot((-d,d),(1-d,1+d), **kwargs)
kwargs.update(transform=axes[3][5].transAxes)
axes[3][5].plot((-d,d),(-d,+d), **kwargs)
axes[3][5].plot((-d,d),(1-d,1+d), **kwargs)
axes[3][0].set_ylabel('Flash density\n(# day$^{-1}$ km$^{-2}$)')
axes[3][0].ticklabel_format(axis='y',style='sci', scilimits=(0,0))
axes[3][0].grid(which='major', axis='both', color='lightgray')
axes[3][1].grid(which='major', axis='both', color='lightgray')
axes[3][2].grid(which='major', axis='both', color='lightgray')
axes[3][3].grid(which='major', axis='both', color='lightgray')
axes[3][4].grid(which='major', axis='both', color='lightgray')
axes[3][5].grid(which='major', axis='both', color='lightgray')

axes[3][0].set_xticks(ticks=[pd.to_datetime('2015-06', format='%Y-%m'), pd.to_datetime('2015-07', format='%Y-%m'),
                     pd.to_datetime('2015-08', format='%Y-%m'), pd.to_datetime('2015-09', format='%Y-%m')])
axes[3][0].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][1].set_xticks(ticks=[pd.to_datetime('2016-06', format='%Y-%m'), pd.to_datetime('2016-07', format='%Y-%m'),
                      pd.to_datetime('2016-08', format='%Y-%m'), pd.to_datetime('2016-09', format='%Y-%m')])
axes[3][1].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][2].set_xticks(ticks=[pd.to_datetime('2017-06', format='%Y-%m'), pd.to_datetime('2017-07', format='%Y-%m'),
                      pd.to_datetime('2017-08', format='%Y-%m'), pd.to_datetime('2017-09', format='%Y-%m')])
axes[3][2].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][3].set_xticks(ticks=[pd.to_datetime('2018-06', format='%Y-%m'), pd.to_datetime('2018-07', format='%Y-%m'),
                      pd.to_datetime('2018-08', format='%Y-%m'), pd.to_datetime('2018-09', format='%Y-%m')])
axes[3][3].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][4].set_xticks(ticks=[pd.to_datetime('2019-06', format='%Y-%m'), pd.to_datetime('2019-07', format='%Y-%m'),
                      pd.to_datetime('2019-08', format='%Y-%m'), pd.to_datetime('2019-09', format='%Y-%m')])
axes[3][4].set_xticklabels(['', '', '', ''], rotation=30)
axes[3][5].set_xticks(ticks=[pd.to_datetime('2020-06', format='%Y-%m'), pd.to_datetime('2020-07', format='%Y-%m'),
                      pd.to_datetime('2020-08', format='%Y-%m'), pd.to_datetime('2020-09', format='%Y-%m')])
axes[3][5].set_xticklabels(['', '', '', ''], rotation=30)

plt.savefig('/scratch/leuven/336/vsc33651/nu-wrf-dev/Plots/timeseries_all_d02.eps')
plt.close()
