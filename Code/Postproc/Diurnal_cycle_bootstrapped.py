# ---------------------------------------------------------------------------------------------
# MODULES
# ---------------------------------------------------------------------------------------------
import numpy as np
import pandas as pd
from netCDF4 import Dataset
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.utils import resample

# ---------------------------------------------------------------------------------------------
# LOAD DATA
# ---------------------------------------------------------------------------------------------
print('load data')
ds_d01_G = Dataset('/scratch/leuven/projects/lt1_2020_es_pilot/project_output/rsda/vsc33651/wrfout_nc_files/data_calibrated_ax_d01.nc', 'r')
ds_d01_T = Dataset('/scratch/leuven/projects/lt1_2020_es_pilot/project_output/rsda/vsc33651/wrfout_nc_files/data_calibrated_ax_d01_Thompson.nc', 'r')

time = pd.to_datetime('2000010100', format='%Y%m%d%H') + pd.to_timedelta(ds_d01_G['time'][:], unit='h')

# ---------------------------------------------------------------------------------------------
# DIURNAL CYCLE
# ---------------------------------------------------------------------------------------------
print('diurnal cycle')
# Get the times right
times = pd.to_datetime(time) - pd.to_timedelta(7, unit='h')
months = times.month
summer = np.where([(months > 5) & (months <9)])
time_summer = times[summer[1]]

# Extract the right data
print('lpi_d01')
lpi_d01_G = np.nanmean(ds_d01_G['LPI_d01'][:], axis=(1,2))
lpi_summer_d01_G = lpi_d01_G[summer[1]]
lpi_d01_T = np.nanmean(ds_d01_T['LPI_d01'][:], axis=(1,2))
lpi_summer_d01_T = lpi_d01_T[summer[1]]
print('lpi_d02')
lpi_d02_G = np.nanmean(ds_d01_G['LPI_d02'][:], axis=(1,2))
lpi_summer_d02_G = lpi_d02_G[summer[1]]
lpi_d02_T = np.nanmean(ds_d01_T['LPI_d02'][:], axis=(1,2))
lpi_summer_d02_T = lpi_d02_T[summer[1]]
print('ltg3_d01')
ltg3_d01_G = np.nanmean(ds_d01_G['LTG3_d01'][:], axis=(1,2))
ltg3_summer_d01_G = ltg3_d01_G[summer[1]]
ltg3_d01_T = np.nanmean(ds_d01_T['LTG3_d01'][:], axis=(1,2))
ltg3_summer_d01_T = ltg3_d01_T[summer[1]]
print('ltg3_d02')
ltg3_d02_G = np.nanmean(ds_d01_G['LTG3_d02'][:], axis=(1,2))
ltg3_summer_d02_G = ltg3_d02_G[summer[1]]
ltg3_d02_T = np.nanmean(ds_d01_T['LTG3_d02'][:], axis=(1,2))
ltg3_summer_d02_T = ltg3_d02_T[summer[1]]
print('pr92w_d01')
pr92w_d01_G = np.nanmean(ds_d01_G['PR92W_d01'][:], axis=(1,2))
pr92w_summer_d01_G = pr92w_d01_G[summer[1]]
pr92w_d01_T = np.nanmean(ds_d01_T['PR92W_d01'][:], axis=(1,2))
pr92w_summer_d01_T = pr92w_d01_T[summer[1]]
print('pr92w_d02')
pr92w_d02_G = np.nanmean(ds_d01_G['PR92W_d02'][:], axis=(1,2))
pr92w_summer_d02_G = pr92w_d02_G[summer[1]]
pr92w_d02_T = np.nanmean(ds_d01_T['PR92W_d02'][:], axis=(1,2))
pr92w_summer_d02_T = pr92w_d02_T[summer[1]]
print('capexp_R_d01')
capexp_r_d01_G = np.nanmean(ds_d01_G['CAPExP_R_d01'][:], axis=(1,2))
capexp_r_summer_d01_G = capexp_r_d01_G[summer[1]]
capexp_r_d01_T = np.nanmean(ds_d01_T['CAPExP_R_d01'][:], axis=(1,2))
capexp_r_summer_d01_T = capexp_r_d01_T[summer[1]]
print('capexp_R_d02')
capexp_r_d02_G = np.nanmean(ds_d01_G['CAPExP_R_d02'][:], axis=(1,2))
capexp_r_summer_d02_G = capexp_r_d02_G[summer[1]]
capexp_r_d02_T = np.nanmean(ds_d01_T['CAPExP_R_d02'][:], axis=(1,2))
capexp_r_summer_d02_T = capexp_r_d02_T[summer[1]]
print('capexp_CSI_d01')
capexp_csi_d01_G = np.nanmean(ds_d01_G['CAPExP_CSI_d01'][:], axis=(1,2))
capexp_csi_summer_d01_G = capexp_csi_d01_G[summer[1]]
capexp_csi_d01_T = np.nanmean(ds_d01_T['CAPExP_CSI_d01'][:], axis=(1,2))
capexp_csi_summer_d01_T = capexp_csi_d01_T[summer[1]]
print('capexp_CSI_d02')
capexp_csi_d02_G = np.nanmean(ds_d01_G['CAPExP_CSI_d02'][:], axis=(1,2))
capexp_csi_summer_d02_G = capexp_csi_d02_G[summer[1]]
capexp_csi_d02_T = np.nanmean(ds_d01_T['CAPExP_CSI_d02'][:], axis=(1,2))
capexp_csi_summer_d02_T = capexp_csi_d02_T[summer[1]]
print('obs_d01')
obs_d01 = np.nanmean(ds_d01_G['Obs'][:], axis=(1,2))
obs_summer_d01 = obs_d01[summer[1]]

LPI_d01_G = np.zeros((24))
LPI_d02_G = np.zeros((24))
LTG3_d01_G = np.zeros((24))
LTG3_d02_G = np.zeros((24))
PR92W_d01_G = np.zeros((24))
PR92W_d02_G = np.zeros((24))
CAPExP_R_d01_G = np.zeros((24))
CAPExP_R_d02_G = np.zeros((24))
CAPExP_CSI_d01_G = np.zeros((24))
CAPExP_CSI_d02_G = np.zeros((24))
LPI_d01_T = np.zeros((24))
LPI_d02_T = np.zeros((24))
LTG3_d01_T = np.zeros((24))
LTG3_d02_T = np.zeros((24))
PR92W_d01_T = np.zeros((24))
PR92W_d02_T = np.zeros((24))
CAPExP_R_d01_T = np.zeros((24))
CAPExP_R_d02_T = np.zeros((24))
CAPExP_CSI_d01_T = np.zeros((24))
CAPExP_CSI_d02_T = np.zeros((24))
Obs_d01 = np.zeros((24))

# Define percentiles for the bootstrapping
percentiles_obs = np.zeros((24,2))
percentiles_lpi_d01_G = np.zeros((24,2))
percentiles_ltg3_d01_G = np.zeros((24,2))
percentiles_pr92w_d01_G = np.zeros((24,2))
percentiles_capexp_r_d01_G = np.zeros((24,2))
percentiles_capexp_csi_d01_G = np.zeros((24,2))
percentiles_lpi_d01_T = np.zeros((24,2))
percentiles_ltg3_d01_T = np.zeros((24,2))
percentiles_pr92w_d01_T = np.zeros((24,2))
percentiles_capexp_r_d01_T = np.zeros((24,2))
percentiles_capexp_csi_d01_T = np.zeros((24,2))
percentiles_lpi_d02_G = np.zeros((24,2))
percentiles_ltg3_d02_G = np.zeros((24,2))
percentiles_pr92w_d02_G = np.zeros((24,2))
percentiles_capexp_r_d02_G = np.zeros((24,2))
percentiles_capexp_csi_d02_G = np.zeros((24,2))
percentiles_lpi_d02_T = np.zeros((24,2))
percentiles_ltg3_d02_T = np.zeros((24,2))
percentiles_pr92w_d02_T = np.zeros((24,2))
percentiles_capexp_r_d02_T = np.zeros((24,2))
percentiles_capexp_csi_d02_T = np.zeros((24,2))

for i in range(0,24):
    # Run the for loop to get the average diurnal cycle
    print('loop ' + str(i))
    time_select_vector = np.where(time_summer.hour == i)
    LPI_d01_G[i] = np.nanmean(lpi_summer_d01_G[time_select_vector[0]])
    LPI_d02_G[i] = np.nanmean(lpi_summer_d02_G[time_select_vector[0]])
    LTG3_d01_G[i] = np.nanmean(ltg3_summer_d01_G[time_select_vector[0]])
    LTG3_d02_G[i] = np.nanmean(ltg3_summer_d02_G[time_select_vector[0]])
    PR92W_d01_G[i] = np.nanmean(pr92w_summer_d01_G[time_select_vector[0]])
    PR92W_d02_G[i] = np.nanmean(pr92w_summer_d02_G[time_select_vector[0]])
    CAPExP_R_d01_G[i] = np.nanmean(capexp_r_summer_d01_G[time_select_vector[0]])
    CAPExP_R_d02_G[i] = np.nanmean(capexp_r_summer_d02_G[time_select_vector[0]])
    CAPExP_CSI_d01_G[i] = np.nanmean(capexp_csi_summer_d01_G[time_select_vector[0]])
    CAPExP_CSI_d02_G[i] = np.nanmean(capexp_csi_summer_d02_G[time_select_vector[0]])
    Obs_d01[i] = np.nanmean(obs_summer_d01[time_select_vector[0]])
    LPI_d01_T[i] = np.nanmean(lpi_summer_d01_T[time_select_vector[0]])
    LPI_d02_T[i] = np.nanmean(lpi_summer_d02_T[time_select_vector[0]])
    LTG3_d01_T[i] = np.nanmean(ltg3_summer_d01_T[time_select_vector[0]])
    LTG3_d02_T[i] = np.nanmean(ltg3_summer_d02_T[time_select_vector[0]])
    PR92W_d01_T[i] = np.nanmean(pr92w_summer_d01_T[time_select_vector[0]])
    PR92W_d02_T[i] = np.nanmean(pr92w_summer_d02_T[time_select_vector[0]])
    CAPExP_R_d01_T[i] = np.nanmean(capexp_r_summer_d01_T[time_select_vector[0]])
    CAPExP_R_d02_T[i] = np.nanmean(capexp_r_summer_d02_T[time_select_vector[0]])
    CAPExP_CSI_d01_T[i] = np.nanmean(capexp_csi_summer_d01_T[time_select_vector[0]])
    CAPExP_CSI_d02_T[i] = np.nanmean(capexp_csi_summer_d02_T[time_select_vector[0]])
    
    # Create empty array to fill the results
    bootstrap_means_obs = np.zeros([100, obs_summer_d01[time_select_vector[0]].shape[-1]])
    bootstrap_means_lpi_d01_G = np.zeros([100, lpi_summer_d01_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_ltg3_d01_G = np.zeros([100, ltg3_summer_d01_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_pr92w_d01_G = np.zeros([100, pr92w_summer_d01_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_r_d01_G = np.zeros([100, capexp_r_summer_d01_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_csi_d01_G = np.zeros([100, capexp_csi_summer_d01_G[time_select_vector[0]].shape[-1]])

    bootstrap_means_lpi_d02_G = np.zeros([100, lpi_summer_d02_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_ltg3_d02_G = np.zeros([100, ltg3_summer_d02_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_pr92w_d02_G = np.zeros([100, pr92w_summer_d02_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_r_d02_G = np.zeros([100, capexp_r_summer_d02_G[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_csi_d02_G = np.zeros([100, capexp_csi_summer_d02_G[time_select_vector[0]].shape[-1]])

    bootstrap_means_lpi_d01_T = np.zeros([100, lpi_summer_d01_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_ltg3_d01_T = np.zeros([100, ltg3_summer_d01_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_pr92w_d01_T = np.zeros([100, pr92w_summer_d01_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_r_d01_T = np.zeros([100, capexp_r_summer_d01_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_csi_d01_T = np.zeros([100, capexp_csi_summer_d01_T[time_select_vector[0]].shape[-1]])

    bootstrap_means_lpi_d02_T = np.zeros([100, lpi_summer_d02_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_ltg3_d02_T = np.zeros([100, ltg3_summer_d02_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_pr92w_d02_T = np.zeros([100, pr92w_summer_d02_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_r_d02_T = np.zeros([100, capexp_r_summer_d02_T[time_select_vector[0]].shape[-1]])
    bootstrap_means_capexp_csi_d02_T = np.zeros([100, capexp_csi_summer_d02_T[time_select_vector[0]].shape[-1]])

    for ii in range(100): # For-loop for bootstrapping
        # Generate random indices for data *with* replacement, then take the sample mean
        random_sample_obs = resample(obs_summer_d01[time_select_vector[0]])
        bootstrap_means_obs[ii] = np.nanmean(random_sample_obs, axis=0)
        random_sample_lpi_d01_G = resample(lpi_summer_d01_G[time_select_vector[0]])
        bootstrap_means_lpi_d01_G[ii] = np.nanmean(random_sample_lpi_d01_G, axis=0)
        random_sample_ltg3_d01_G = resample(ltg3_summer_d01_G[time_select_vector[0]])
        bootstrap_means_ltg3_d01_G[ii] = np.nanmean(random_sample_ltg3_d01_G, axis=0)
        random_sample_pr92w_d01_G = resample(pr92w_summer_d01_G[time_select_vector[0]])
        bootstrap_means_pr92w_d01_G[ii] = np.nanmean(random_sample_pr92w_d01_G, axis=0)
        random_sample_capexp_csi_d01_G = resample(capexp_csi_summer_d01_G[time_select_vector[0]])
        bootstrap_means_capexp_csi_d01_G[ii] = np.nanmean(random_sample_capexp_csi_d01_G, axis=0)
        random_sample_capexp_r_d01_G = resample(capexp_r_summer_d01_G[time_select_vector[0]])
        bootstrap_means_capexp_r_d01_G[ii] = np.nanmean(random_sample_capexp_r_d01_G, axis=0)

        random_sample_lpi_d02_G = resample(lpi_summer_d02_G[time_select_vector[0]])
        bootstrap_means_lpi_d02_G[ii] = np.nanmean(random_sample_lpi_d02_G, axis=0)
        random_sample_ltg3_d02_G = resample(ltg3_summer_d02_G[time_select_vector[0]])
        bootstrap_means_ltg3_d02_G[ii] = np.nanmean(random_sample_ltg3_d02_G, axis=0)
        random_sample_pr92w_d02_G = resample(pr92w_summer_d02_G[time_select_vector[0]])
        bootstrap_means_pr92w_d02_G[ii] = np.nanmean(random_sample_pr92w_d02_G, axis=0)
        random_sample_capexp_csi_d02_G = resample(capexp_csi_summer_d02_G[time_select_vector[0]])
        bootstrap_means_capexp_csi_d02_G[ii] = np.nanmean(random_sample_capexp_csi_d02_G, axis=0)
        random_sample_capexp_r_d02_G = resample(capexp_r_summer_d02_G[time_select_vector[0]])
        bootstrap_means_capexp_r_d02_G[ii] = np.nanmean(random_sample_capexp_r_d02_G, axis=0)

        random_sample_lpi_d01_T = resample(lpi_summer_d01_T[time_select_vector[0]])
        bootstrap_means_lpi_d01_T[ii] = np.nanmean(random_sample_lpi_d01_T, axis=0)
        random_sample_ltg3_d01_T = resample(ltg3_summer_d01_T[time_select_vector[0]])
        bootstrap_means_ltg3_d01_T[ii] = np.nanmean(random_sample_ltg3_d01_T, axis=0)
        random_sample_pr92w_d01_T = resample(pr92w_summer_d01_T[time_select_vector[0]])
        bootstrap_means_pr92w_d01_T[ii] = np.nanmean(random_sample_pr92w_d01_T, axis=0)
        random_sample_capexp_csi_d01_T = resample(capexp_csi_summer_d01_T[time_select_vector[0]])
        bootstrap_means_capexp_csi_d01_T[ii] = np.nanmean(random_sample_capexp_csi_d01_T, axis=0)
        random_sample_capexp_r_d01_T = resample(capexp_r_summer_d01_T[time_select_vector[0]])
        bootstrap_means_capexp_r_d01_T[ii] = np.nanmean(random_sample_capexp_r_d01_T, axis=0)

        random_sample_lpi_d02_T = resample(lpi_summer_d02_T[time_select_vector[0]])
        bootstrap_means_lpi_d02_T[ii] = np.nanmean(random_sample_lpi_d02_T, axis=0)
        random_sample_ltg3_d02_T = resample(ltg3_summer_d02_T[time_select_vector[0]])
        bootstrap_means_ltg3_d02_T[ii] = np.nanmean(random_sample_ltg3_d02_T, axis=0)
        random_sample_pr92w_d02_T = resample(pr92w_summer_d02_T[time_select_vector[0]])
        bootstrap_means_pr92w_d02_T[ii] = np.nanmean(random_sample_pr92w_d02_T, axis=0)
        random_sample_capexp_csi_d02_T = resample(capexp_csi_summer_d02_T[time_select_vector[0]])
        bootstrap_means_capexp_csi_d02_T[ii] = np.nanmean(random_sample_capexp_csi_d02_T, axis=0)
        random_sample_capexp_r_d02_T = resample(capexp_r_summer_d02_T[time_select_vector[0]])
        bootstrap_means_capexp_r_d02_T[ii] = np.nanmean(random_sample_capexp_r_d02_T, axis=0)

    bootstrap_obs = np.nanmean(bootstrap_means_obs, axis=1) # Take the average along axis 1, to reduce dimensions to 1 dimension)
    bootstrap_lpi_d01_G = np.nanmean(bootstrap_means_lpi_d01_G, axis=1)
    bootstrap_ltg3_d01_G = np.nanmean(bootstrap_means_ltg3_d01_G, axis=1)
    bootstrap_pr92w_d01_G = np.nanmean(bootstrap_means_pr92w_d01_G, axis=1)
    bootstrap_capexp_csi_d01_G = np.nanmean(bootstrap_means_capexp_csi_d01_G, axis=1)
    bootstrap_capexp_r_d01_G = np.nanmean(bootstrap_means_capexp_r_d01_G, axis=1)

    bootstrap_lpi_d01_T = np.nanmean(bootstrap_means_lpi_d01_T, axis=1)
    bootstrap_ltg3_d01_T = np.nanmean(bootstrap_means_ltg3_d01_T, axis=1)
    bootstrap_pr92w_d01_T = np.nanmean(bootstrap_means_pr92w_d01_T, axis=1)
    bootstrap_capexp_csi_d01_T = np.nanmean(bootstrap_means_capexp_csi_d01_T, axis=1)
    bootstrap_capexp_r_d01_T = np.nanmean(bootstrap_means_capexp_r_d01_T, axis=1)

    bootstrap_lpi_d02_G = np.nanmean(bootstrap_means_lpi_d02_G, axis=1)
    bootstrap_ltg3_d02_G = np.nanmean(bootstrap_means_ltg3_d02_G, axis=1)
    bootstrap_pr92w_d02_G = np.nanmean(bootstrap_means_pr92w_d02_G, axis=1)
    bootstrap_capexp_csi_d02_G = np.nanmean(bootstrap_means_capexp_csi_d02_G, axis=1)
    bootstrap_capexp_r_d02_G = np.nanmean(bootstrap_means_capexp_r_d02_G, axis=1)

    bootstrap_lpi_d02_T = np.nanmean(bootstrap_means_lpi_d02_T, axis=1)
    bootstrap_ltg3_d02_T = np.nanmean(bootstrap_means_ltg3_d02_T, axis=1)
    bootstrap_pr92w_d02_T = np.nanmean(bootstrap_means_pr92w_d02_T, axis=1)
    bootstrap_capexp_csi_d02_T = np.nanmean(bootstrap_means_capexp_csi_d02_T, axis=1)
    bootstrap_capexp_r_d02_T = np.nanmean(bootstrap_means_capexp_r_d02_T, axis=1)

    # Compute the percentiles of choice for the bootstrapped means (here 95% CI wanted)
    percentiles_obs[i, :] = np.percentile(bootstrap_obs, [2.5, 97.5], axis=0)
    percentiles_lpi_d01_G[i, :] = np.percentile(bootstrap_lpi_d01_G, [2.5, 97.5], axis=0)
    percentiles_ltg3_d01_G[i, :] = np.percentile(bootstrap_ltg3_d01_G, [2.5, 97.5], axis=0)
    percentiles_pr92w_d01_G[i, :] = np.percentile(bootstrap_pr92w_d01_G, [2.5, 97.5], axis=0)
    percentiles_capexp_csi_d01_G[i, :] = np.percentile(bootstrap_capexp_csi_d01_G, [2.5, 97.5], axis=0)
    percentiles_capexp_r_d01_G[i, :] = np.percentile(bootstrap_capexp_r_d01_G, [2.5, 97.5], axis=0)

    percentiles_lpi_d01_T[i, :] = np.percentile(bootstrap_lpi_d01_T, [2.5, 97.5], axis=0)
    percentiles_ltg3_d01_T[i, :] = np.percentile(bootstrap_ltg3_d01_T, [2.5, 97.5], axis=0)
    percentiles_pr92w_d01_T[i, :] = np.percentile(bootstrap_pr92w_d01_T, [2.5, 97.5], axis=0)
    percentiles_capexp_csi_d01_T[i, :] = np.percentile(bootstrap_capexp_csi_d01_T, [2.5, 97.5], axis=0)
    percentiles_capexp_r_d01_T[i, :] = np.percentile(bootstrap_capexp_r_d01_T, [2.5, 97.5], axis=0)

    percentiles_lpi_d02_G[i, :] = np.percentile(bootstrap_lpi_d02_G, [2.5, 97.5], axis=0)
    percentiles_ltg3_d02_G[i, :] = np.percentile(bootstrap_ltg3_d02_G, [2.5, 97.5], axis=0)
    percentiles_pr92w_d02_G[i, :] = np.percentile(bootstrap_pr92w_d02_G, [2.5, 97.5], axis=0)
    percentiles_capexp_csi_d02_G[i, :] = np.percentile(bootstrap_capexp_csi_d02_G, [2.5, 97.5], axis=0)
    percentiles_capexp_r_d02_G[i, :] = np.percentile(bootstrap_capexp_r_d02_G, [2.5, 97.5], axis=0)

    percentiles_lpi_d02_T[i, :] = np.percentile(bootstrap_lpi_d02_T, [2.5, 97.5], axis=0)
    percentiles_ltg3_d02_T[i, :] = np.percentile(bootstrap_ltg3_d02_T, [2.5, 97.5], axis=0)
    percentiles_pr92w_d02_T[i, :] = np.percentile(bootstrap_pr92w_d02_T, [2.5, 97.5], axis=0)
    percentiles_capexp_csi_d02_T[i, :] = np.percentile(bootstrap_capexp_csi_d02_T, [2.5, 97.5], axis=0)
    percentiles_capexp_r_d02_T[i, :] = np.percentile(bootstrap_capexp_r_d02_T, [2.5, 97.5], axis=0)

## plot
Hours = np.linspace(0,24, num=24, endpoint=False)

x1 = 0.0005

fig = plt.figure()
ax1 = plt.subplot2grid((3,2),(0,0))
ax2 = plt.subplot2grid((3,2),(1,0))
ax3 = plt.subplot2grid((3,2),(0,1))
ax4 = plt.subplot2grid((3,2),(1,1))
ax5 = plt.subplot2grid((3,2),(2,0))
ax6 = plt.subplot2grid((3,2),(2,1))

ax1.plot(Hours,Obs_d01, color='grey', label='CLDN')
ax1.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax1.set_title('CLDN', fontsize = 16)
# ax1.annotate('   (a) \n', xy=(x1, ax1.get_ylim()[1]),annotation_clip=False)
ax1.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax1.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax1.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax1.tick_params(axis='both', which='major', labelsize=12)
ax1.grid(which='major', axis='both', color='lightgray')

ax2.plot(Hours, Obs_d01, 'grey')
ax2.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax2.plot(Hours, LTG3_d01_G, 'k')
ax2.fill_between(Hours, percentiles_ltg3_d01_G[:,0], percentiles_ltg3_d01_G[:,1], color='lightsteelblue')
ax2.set_title('LT3', fontsize = 16)
ax2.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax2.tick_params(axis='both', which='major', labelsize=12)
ax2.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax2.annotate('   (c) \n', xy=(x1, ax2.get_ylim()[1]),annotation_clip=False)
ax2.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax2.grid(which='major', axis='both', color='lightgray')

ax3.plot(Hours, Obs_d01, 'grey')
ax3.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax3.plot(Hours, LPI_d01_G, 'k')
ax3.fill_between(Hours, percentiles_lpi_d01_G[:,0], percentiles_lpi_d01_G[:,1], color='lightsteelblue')
ax3.set_title('LPI', fontsize = 16)
# ax3.annotate('   (b) \n', xy=(x1, ax3.get_ylim()[1]),annotation_clip=False)
ax3.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax3.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax3.tick_params(axis='both', which='major', labelsize=12)
ax3.grid(which='major', axis='both', color='lightgray')

ax4.plot(Hours, Obs_d01, 'grey')
ax4.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax4.plot(Hours, PR92W_d01_G, 'k')
ax4.fill_between(Hours, percentiles_pr92w_d01_G[:,0], percentiles_pr92w_d01_G[:,1], color='lightsteelblue')
ax4.set_title('PR92W', fontsize = 16)
# ax4.annotate('   (d) \n', xy=(x1, ax4.get_ylim()[1]),annotation_clip=False)
ax4.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax4.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax4.tick_params(axis='both', which='major', labelsize=12)
ax4.grid(which='major', axis='both', color='lightgray')

ax5.plot(Hours, Obs_d01, 'grey')
ax5.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax5.plot(Hours, CAPExP_R_d01_G, 'k')
ax5.fill_between(Hours, percentiles_capexp_r_d01_G[:,0], percentiles_capexp_r_d01_G[:,1], color='lightsteelblue')
ax5.set_title('CAPExP_R', fontsize = 16)
# ax5.annotate('   (e) \n', xy=(x1, ax5.get_ylim()[1]),annotation_clip=False)
ax5.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax5.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax5.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax5.grid(which='major', axis='both', color='lightgray')
ax5.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax5.tick_params(axis='both', which='major', labelsize=12)

ax6.plot(Hours, Obs_d01, 'grey')
ax6.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax6.plot(Hours, CAPExP_CSI_d01_G, 'k')
ax6.fill_between(Hours, percentiles_capexp_csi_d01_G[:,0], percentiles_capexp_csi_d01_G[:,1], color='lightsteelblue')
ax6.set_title('CAPExP_CSI', fontsize = 16)
# ax6.annotate('   (f) \n', xy=(x1, ax6.get_ylim()[1]),annotation_clip=False)
ax6.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax6.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax6.grid(which='major', axis='both', color='lightgray')
ax6.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax6.tick_params(axis='both', which='major', labelsize=12)

fig.suptitle('Convection-parameterized (9 km)', fontsize = 20)
fig.tight_layout()
plt.show()

# Plot D02
fig = plt.figure()
ax1 = plt.subplot2grid((3,2),(0,0))
ax2 = plt.subplot2grid((3,2),(1,0))
ax3 = plt.subplot2grid((3,2),(0,1))
ax4 = plt.subplot2grid((3,2),(1,1))
ax5 = plt.subplot2grid((3,2),(2,0))
ax6 = plt.subplot2grid((3,2),(2,1))

ax1.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax1.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax1.set_title('CLDN', fontsize = 16)
# ax1.annotate('   (a) \n', xy=(x1, ax1.get_ylim()[1]),annotation_clip=False)
ax1.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax1.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax1.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax1.grid(which='major', axis='both', color='lightgray')
ax1.tick_params(axis='both', which='major', labelsize=12)

ax2.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax2.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax2.plot(Hours, LTG3_d02_G, 'k', label='LT3')
ax2.fill_between(Hours, percentiles_ltg3_d02_G[:,0], percentiles_ltg3_d02_G[:,1], color='lightsteelblue')
ax2.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax2.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax2.set_title('LT3', fontsize = 16)
# ax2.annotate('   (c) \n', xy=(x1, ax2.get_ylim()[1]),annotation_clip=False)
ax2.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax2.grid(which='major', axis='both', color='lightgray')
ax2.tick_params(axis='both', which='major', labelsize=12)

ax3.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax3.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax3.plot(Hours, LPI_d02_G, 'k', label='LPI')
ax3.fill_between(Hours, percentiles_lpi_d02_G[:,0], percentiles_lpi_d02_G[:,1], color='lightsteelblue')
ax3.set_title('LPI', fontsize = 16)
ax3.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax3.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax3.annotate('   (b) \n', xy=(x1, ax3.get_ylim()[1]),annotation_clip=False)
ax3.grid(which='major', axis='both', color='lightgray')
ax3.tick_params(axis='both', which='major', labelsize=12)

ax4.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax4.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax4.plot(Hours, PR92W_d02_G, 'k', label='PR92W')
ax4.fill_between(Hours, percentiles_pr92w_d02_G[:,0], percentiles_pr92w_d02_G[:,1], color='lightsteelblue')
ax4.set_title('PR92W', fontsize = 16)
ax4.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax4.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax4.annotate('   (d) \n', xy=(x1, ax4.get_ylim()[1]),annotation_clip=False)
ax4.grid(which='major', axis='both', color='lightgray')
ax4.tick_params(axis='both', which='major', labelsize=12)

ax5.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax5.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax5.plot(Hours, CAPExP_R_d02_G, 'k', label='CAPExP_R')
ax5.fill_between(Hours, percentiles_capexp_r_d02_G[:,0], percentiles_capexp_r_d02_G[:,1], color='lightsteelblue')
ax5.set_title('CAPExP_R', fontsize = 16)
ax5.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax5.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax5.annotate('   (e) \n', xy=(x1, ax5.get_ylim()[1]),annotation_clip=False)
ax5.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax5.grid(which='major', axis='both', color='lightgray')
ax5.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax5.tick_params(axis='both', which='major', labelsize=12)

ax6.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax6.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax6.plot(Hours, CAPExP_CSI_d02_G, 'k', label='CAPExP_CSI')
ax6.fill_between(Hours, percentiles_capexp_csi_d02_G[:,0], percentiles_capexp_csi_d02_G[:,1], color='lightsteelblue')
ax6.set_title('CAPExP_CSI', fontsize = 16)
ax6.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax6.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax6.annotate('   (f) \n', xy=(x1, ax6.get_ylim()[1]),annotation_clip=False)
ax6.grid(which='major', axis='both', color='lightgray')
ax6.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax6.tick_params(axis='both', which='major', labelsize=12)

fig.suptitle('Convection-permitting (3 km)', fontsize = 20)
fig.tight_layout()
plt.show()

# Thompson
fig = plt.figure()
ax1 = plt.subplot2grid((3,2),(0,0))
ax2 = plt.subplot2grid((3,2),(1,0))
ax3 = plt.subplot2grid((3,2),(0,1))
ax4 = plt.subplot2grid((3,2),(1,1))
ax5 = plt.subplot2grid((3,2),(2,0))
ax6 = plt.subplot2grid((3,2),(2,1))

ax1.plot(Hours,Obs_d01, color='grey', label='CLDN')
ax1.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax1.set_title('CLDN', fontsize = 16)
# ax1.annotate('   (a) \n', xy=(x1, ax1.get_ylim()[1]),annotation_clip=False)
ax1.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax1.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax1.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax1.grid(which='major', axis='both', color='lightgray')
ax1.tick_params(axis='both', which='major', labelsize=12)

ax2.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax2.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax2.plot(Hours, LTG3_d01_T, 'k', label='LT3')
ax2.fill_between(Hours, percentiles_ltg3_d01_T[:,0], percentiles_ltg3_d01_T[:,1], color='lightsteelblue')
ax2.set_title('LT3', fontsize = 16)
ax2.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax2.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax2.annotate('   (c) \n', xy=(x1, ax2.get_ylim()[1]),annotation_clip=False)
ax2.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax2.grid(which='major', axis='both', color='lightgray')
ax2.tick_params(axis='both', which='major', labelsize=12)

ax3.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax3.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax3.plot(Hours, LPI_d01_T, 'k', label='LPI')
ax3.fill_between(Hours, percentiles_lpi_d01_T[:,0], percentiles_lpi_d01_T[:,1], color='lightsteelblue')
ax3.set_title('LPI', fontsize = 16)
# ax3.annotate('   (b) \n', xy=(x1, ax3.get_ylim()[1]),annotation_clip=False)
ax3.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax3.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax3.grid(which='major', axis='both', color='lightgray')
ax3.tick_params(axis='both', which='major', labelsize=12)

ax4.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax4.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax4.plot(Hours, PR92W_d01_T, 'k', label='PR92W')
ax4.fill_between(Hours, percentiles_pr92w_d01_T[:,0], percentiles_pr92w_d01_T[:,1], color='lightsteelblue')
ax4.set_title('PR92W', fontsize = 16)
# ax4.annotate('   (d) \n', xy=(x1, ax4.get_ylim()[1]),annotation_clip=False)
ax4.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax4.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax4.grid(which='major', axis='both', color='lightgray')
ax4.tick_params(axis='both', which='major', labelsize=12)

ax5.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax5.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax5.plot(Hours, CAPExP_R_d01_T, 'k', label='CAPExP_R')
ax5.fill_between(Hours, percentiles_capexp_r_d01_T[:,0], percentiles_capexp_r_d01_T[:,1], color='lightsteelblue')
ax5.set_title('CAPExP_R', fontsize = 16)
# ax5.annotate('   (e) \n', xy=(x1, ax5.get_ylim()[1]),annotation_clip=False)
ax5.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax5.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax5.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax5.grid(which='major', axis='both', color='lightgray')
ax5.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax5.tick_params(axis='both', which='major', labelsize=12)

ax6.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax6.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax6.plot(Hours, CAPExP_CSI_d01_T, 'k', label='CAPExP_CSI')
ax6.fill_between(Hours, percentiles_capexp_csi_d01_T[:,0], percentiles_capexp_csi_d01_T[:,1], color='lightsteelblue')
ax6.set_title('CAPExP_CSI', fontsize = 16)
# ax6.annotate('   (f) \n', xy=(x1, ax6.get_ylim()[1]),annotation_clip=False)
ax6.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax6.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax6.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax6.grid(which='major', axis='both', color='lightgray')
ax6.tick_params(axis='both', which='major', labelsize=12)

fig.suptitle('Convection-parameterized (9 km)', fontsize = 20)
fig.tight_layout()
plt.show()

# Plot D02
fig = plt.figure()
ax1 = plt.subplot2grid((3,2),(0,0))
ax2 = plt.subplot2grid((3,2),(1,0))
ax3 = plt.subplot2grid((3,2),(0,1))
ax4 = plt.subplot2grid((3,2),(1,1))
ax5 = plt.subplot2grid((3,2),(2,0))
ax6 = plt.subplot2grid((3,2),(2,1))

ax1.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax1.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax1.set_title('CLDN', fontsize = 16)
# ax1.annotate('   (a) \n', xy=(x1, ax1.get_ylim()[1]),annotation_clip=False)
ax1.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax1.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax1.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax1.grid(which='major', axis='both', color='lightgray')
ax1.tick_params(axis='both', which='major', labelsize=12)

ax2.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax2.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax2.plot(Hours, LTG3_d02_T, 'k', label='LT3')
ax2.fill_between(Hours, percentiles_ltg3_d02_T[:,0], percentiles_ltg3_d02_T[:,1], color='lightsteelblue')
ax2.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax2.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax2.set_title('LT3', fontsize = 16)
# ax2.annotate('   (c) \n', xy=(x1, ax2.get_ylim()[1]),annotation_clip=False)
ax2.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax2.grid(which='major', axis='both', color='lightgray')
ax2.tick_params(axis='both', which='major', labelsize=12)

ax3.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax3.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax3.plot(Hours, LPI_d02_T, 'k', label='LPI')
ax3.fill_between(Hours, percentiles_lpi_d02_T[:,0], percentiles_lpi_d02_T[:,1], color='lightsteelblue')
ax3.set_title('LPI', fontsize = 16)
ax3.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax3.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax3.annotate('   (b) \n', xy=(x1, ax3.get_ylim()[1]),annotation_clip=False)
ax3.grid(which='major', axis='both', color='lightgray')
ax3.tick_params(axis='both', which='major', labelsize=12)

ax4.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax4.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax4.plot(Hours, PR92W_d02_T, 'k', label='PR92W')
ax4.fill_between(Hours, percentiles_pr92w_d02_T[:,0], percentiles_pr92w_d02_T[:,1], color='lightsteelblue')
ax4.set_title('PR92W', fontsize = 16)
ax4.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax4.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax4.annotate('   (d) \n', xy=(x1, ax4.get_ylim()[1]),annotation_clip=False)
ax4.grid(which='major', axis='both', color='lightgray')
ax4.tick_params(axis='both', which='major', labelsize=12)

ax5.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax5.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax5.plot(Hours, CAPExP_R_d02_T, 'k', label='CAPExP_R')
ax5.fill_between(Hours, percentiles_capexp_r_d02_T[:,0], percentiles_capexp_r_d02_T[:,1], color='lightsteelblue')
ax5.set_title('CAPExP_R', fontsize = 16)
ax5.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax5.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
# ax5.annotate('   (e) \n', xy=(x1, ax5.get_ylim()[1]),annotation_clip=False)
ax5.set_ylabel('Flash density \n(# hr$^{-1}$ km$^{-2}$)', fontsize = 14)
ax5.set_xlabel('Hour of the day (local time)', fontsize = 14)
ax5.grid(which='major', axis='both', color='lightgray')
ax5.tick_params(axis='both', which='major', labelsize=12)

ax6.plot(Hours, Obs_d01, 'grey', label='CLDN')
ax6.fill_between(Hours, percentiles_obs[:,0], percentiles_obs[:,1], color='lightgrey')
ax6.plot(Hours, CAPExP_CSI_d02_T, 'k', label='CAPExP_CSI')
ax6.fill_between(Hours, percentiles_capexp_csi_d02_T[:,0], percentiles_capexp_csi_d02_T[:,1], color='lightsteelblue')
ax6.set_title('CAPExP_CSI', fontsize = 16)
ax6.set_yticks(ticks = [0, 0.00025, 0.0005, 0.00075, 0.001, 0.00125, 0.0015])
ax6.ticklabel_format(axis='y',style='sci', scilimits=(0,0))
ax6.set_xlabel('Hour of the day (local time)', fontsize = 14)
# ax6.annotate('   (f) \n', xy=(x1, ax6.get_ylim()[1]),annotation_clip=False)
ax6.grid(which='major', axis='both', color='lightgray')
ax6.tick_params(axis='both', which='major', labelsize=12)

fig.suptitle('Convection-permitting (3 km)', fontsize = 20)
fig.tight_layout()
plt.show()
